※용어정리시에 인터넷에있는 정보를 그대로 옮겨적지말고, 실제로 유니티를 사용하면서 해당 내용이 맞는지 검증을 한다.  검증에 오류가 있을시에 질문할것!
-에셋: 유니티에 필요한 리소스나 추가기능을 구매하여 사용 할 수 있는 스토어
-게임오브젝트: 유니티에 하이라키상에 표현되는 모든 물체
-타일맵: 2D에서 타일로 나누어진 맵을 배치하기위해 필요한 컴포넌트
-그리드: 격자의 크기를 설정함.
-타일팔레트: 타일을 팔레트에 배치하여 색칠하듯이 맵을 작성하는 것
-태그: 게임오브젝트를 구별하는데 종류와 같은것을 나타내는데 사용하는 것.
-프리팹: 게임오브젝트를 에셋폴더에 저장하여 재사용 가능한 것.
-레이어:

#컴포넌트: 게임오브젝트에 필요한 기능을 추가 할 수 있는 모듈.
-트랜스폼: 게임오브젝트의 위치나 회전 크기와 같은 상태를 나타내는 내장 컴포넌트. 
-회전: 공간상의 회전 2D에서는 z축회전만 사용하는것이 일반적이다.
-크기: 크기를 조절하는 옵션. 실제로는 크기를 변경하는것보다 원래 비율이 맞은 리소스를 이용하는 것이 원칙.
-스크립트: 프로그램이 실행하는중에 컴포넌트의 정보를 변경하여 원하는 동작을 코드로 작성하는 것.
-스프라이트랜더러: 이미지를 나타내는데 필요한 컴포넌트.

#스크립팅API: 유니티에 컴포넌트나 기능을 스크립트상에서 호출하여 변경하는 객체와 함수.
-input: 키입력이나 마우스입력과 같은 기기에 입력된 정보를 알수있는 API
-Debug: 정상적인 작동을 확인하기위해서 사용하는 출력정보.
-Destroy: 게임오브젝트,컴포넌트 등 유니티 내부에 객체를 삭제하는데 사용할수 있다. 타이머 기능이 내장되어있다.
-Instantiate: 게임오브젝트를 게임 실행중에 할당시켜주는 함수.
-OnCollisionEnter/Stay/Exit: 강체를 가진 물체가 충돌할때 발생하는 함수(들어올때, 머무를때, 나가갈때)
-OnTriggerEnter/Stay/Exit: 강체를 가진 물체가 물리적으로 충돌하지않고 통과될때 발생하는 함수(들어올때, 머무를때, 나가갈때)
-Overlap:
-GameObject.Find: 

#충돌체크(물리): 게임공간상에서 물체간의 관계를 확인하기 위해서 연산을 수행하는 것.
-강체(리지드바디): 물리에서 힘을 받는 대상을 강체라고 부른다. 물리엔진을 이용하여 구현되었다.
-콜라이더: 게임오브젝트에 충돌을 위해서 필요한 컴포넌트. 온콜라이더를 이용하여 이벤트를 확인할수있다.
-트리거: 콜라이더에 활성화하면 충돌되지않고, 통과되는 충돌처리가 된다. 온트리거를 통해서 이벤트를 확인할수있다.
-플렛포머이팩트: 콜라이더에 이펙트를 활성화 시키면 플렛폼을 통과되는 기능을 사용할수있는 컴포넌트
#게임수학: 게임오브젝트를 공간에서 원하는 모양대로 이동하거나 조정하는데 필요한 수학적인 개념
-백터: 위치,방향,방향이 있는 거리,스칼라등을 구할수있는 구조체
-퀴터니언: 회전에 관여하는 수학적인 개념.
#디자인패턴
-싱글톤: 
#기능
-플레이어 조작: 이동: 트랜스폼, 점프:강체, 공격:트랜스폼,강체,콜라이더,태그,오브젝트생성/삭제(총쏘기), 벽부수기:태그,트리거,콜라이더,오브젝트삭제, 아이템 먹기:트리거,태그,콜라이더,오브젝트삭제
-몬스터 이동, 공격(돌진),특정범위에안에 들어가면 감지, 타겟을 추적(어디든 방향이든 이동하는 방법)하기
-부활하기
-점수
-게임관리자

