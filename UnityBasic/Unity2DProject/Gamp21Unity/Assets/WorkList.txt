1. 플레이어 조작하기
1.1. 에셋을 받고 적당한 이미지를 게임오브젝트로 만든다.
1.2. 플레이어를 이동시키면 인스펙터에 트랜스폼에 포지션이 변경된다.
1.3.1. 프로그램이 실행중일때 트랜스폼에 포지션을 변경한다. -> Start()에 넣음 -> 1번만 실행 -> Update()에 넣음 -> 매프레임마다 실행
1.3.2. 이동을하는데 너무 빠르다 -> Time.deletTime곱하기 
1.3.3. (키 입력) (이동한다). -> 유니티 + 키입력 -> 스크립팅API를 통해 코드를 찾음 -> Down:눌렀을때, Up:뗏다. 계속입력
1.4.1. 점프: 물체를 힘을 가하여 (위로 올라간다.->힘을 위로 가한다.) ->리지드바디: 중력에의해서 바닥으로 떨어진다.
1.4.2. 유니티 rigidbody2D -> 에디터: 매뉴얼, 스크립트: 스크립팅 API 
2. 타일맵 제작하기
2.1. 게임오브젝트를 끌고와서 추가함 -> 그리드크기가 맞지않음 -> 크기수정
2.2. 타일팔렛트: 타일팔렛트를 폴더를 만들고 저장한다. -> 타일을 타일팔레트에 드래그엔드롭하여 설정한다 -> 폴더안에 저장한다. -> 타일맵에 그린다.
2.3. 타일맵콜라이더를 추가한다.
3. 플렛폼만들기
3.1. 타일맵을 새로 생성하고 2를 그대로 한다.
3.2. 플렛포머이팩트를 추가하고, 콜라이더에 이펙트사용을 체크한다.
4.아이템을 먹는다.
4.1.아이템을 먹는다? -> 획득? -> 섭취? -> 없어진다.
4.2.먹는다. -> 줍어서 먹는다. -> 줍는다? -> 근처에있다 -> 충돌체크 -> 콜라이더
4.3.플레이어에서 충돌체크를 할때 아이템을 삭제한다.
4.4.아이템을 추가한다 -> 태그를 이용하면, 추가할때마다 코드량이 늘어난다. -> 아이템클래스를 만들고, 점수를 지정하도록만든다.
5.플랫폼부수기
5.1. 플랫폼을 타일맵으로 만들면 모두 박살난다. -> 한개씩 따로 배치하고 콜라이더를 추가함.
5.2. 부딧히면 부순경우 바닥인지 점프를 한것인지 판단하기어려움 -> 머리위에 트리거를 추가함.
6.플레이어 사망 구현하기
6.1.1. 낙사: 떨어지면 죽음 -> y축이 일정이상 떨어지면 죽음. 
6.1.2. 바닥밑에 특정오브젝트에 부딧히면 플레이어를 삭제한다.
7.부활하기
7.1. (시작지점:게임오브젝트에 (다시:플레이어가 삭제되면) 나타난다.:케릭터(게임오브젝트)가 시작위치에 생성된다.)

8.주머니쥐(Opossum) 만들기
8.1. 주머니쥐는 앞으로 돌진한다. -> 주머니쥐는 왼쪽을 바라보므로, 왼쪽으로 (계속:Update) 이동시킨다. -> 날아다니면안되므로 중력이 필요하다(강체)
8.2. (주머니쥐:오브젝트)에 (부딧히면:충돌체크 - 콜라이더) (플레이어:오브젝트)는 (사망:삭제)한다.  -> 

9.총만들기
9.1. (총:오브젝트) (총알:오브젝트-강체)을 (쏴서:Space키를 누르면 총알에 힘을 가한다.) (총알이 적을 공격:삭제)한다.
9.1.1. (총알:강체)은 화약이 터지면 그(힘:리지드바디)으로 날아간다.
9.1.2. 총알이 아니라 공이 되었다. -> 공? 같은 대상에 힘을 가한다. -> 새로운 총알에 힘이 가해지고 나아간다.
9.1.3. 총알이 일정거리를 벗어나면 삭제되게 만들기

10. 독수리 만들기
10.1. 플레이어를 따라다닌다. -> 플레이어의 위치로 이동한다.
10.1.1. 플레이어를 타겟으로 지정하고 타겟의 방향으로 이동하게 만든다. -> 플레이어가 죽으면 더 이상 추적 할 수 없다. -> 플레이어를 타겟으로 넣어준다.
10.1.2. 시야범위안에 들어오면 타겟으로 지정하기 -> 트리거를 이용시 총알에 맞으면 죽는다 -> 오버랩을 이용하여 플레이어와 충돌체크를 함 -> 자기자신이 타겟이 된다 -> 레이어를 이용하여 플레이어만 충돌체크하도록 설정한다.
10.2. 회기 -> 추적할 대상이 없다면 부활위치로 타겟을 변경한다.
10.3. 순찰 -> (A:자신의 리스폰포인트)위치에서 (B:주머니쥐 부활위치)위치로 (이동이 완료)되면, A로 타겟을 변경한다. A로 이동이 완료되면 B를 타겟으로 변경한다.
10.3.1. 이동완료? -> 위치가 타겟의 이동량이 한프레임범위내에 있을때
10.3.2. 독수리 사망시 돌아가는 위치와 순찰위치를 알수없다 -> 독수리에게 순찰위치와 부활위치를 알려준다. -> 게임관리자를 이용해서 부활한 독수리에게 알려주기.

11. 데미지 추가하기
11.1. 플레이어의 능력치를 정의하고 콘솔에서 사용했던 로직 그대로 가져와서 추가함. -> 레거시 GUI를 이용해서 수치를 확인
11.2. 몬스터가 플레이어를 공격하기 -> 플레이어가 몬스터에게 충돌할때 Player.Attack 함수를 호출하고 대상을 공격의 매개변수로 넣는다.
11.3. 플레이어가 몬스터를 공격하기 -> 총알은 공격자를 알수없다. -> 총알에게 주인을 알려줌.
11.3.1. 게임관자이용 -> 멀티플레이가 고려되지않음.
11.3.2. 총을 쏠때 주인의 Player가 무엇인지 총알에 전달함.
11.4. 맞을때마다 지속적으로 데미지가 들어간다. -> 무적시간을 추가한다.

12. 무적추가하기
12.1. 무적: 이상상태에서는 상대방의 공격을 무시한다. 이상상태: 일정시간동안 유지되는 상태 -> 무적상태면 상대방이 공격하지 못한다.
12.1.1. 이상상태 -> 일정시간동안 상태가 유진다. -> 상태: bool 시작하면 참 끝나면 거짓 -> ? 

13. GUI
13.1. 작성할 GUI를 기획한다.
13.2. 작성된 GUI에 따라 레이아웃을 작성한다.
13.3. 작성된 레이아웃을 게임관리자에 등록하고, 장면이 관리되도록 유한상태머신을 이용한다.
13.4. 작성된 레이아웃을 관리하는 기능을 게임관리자에 이벤트화하여 함수로 구현하고, 해당 함수를 버튼에 등록시켜서 작동시킨다.
13.5. 해당 구현된 GUI의 각 모듈의 레이아웃마다 스크립트를 생성해서 관리하고, 변경이 가능하도록 만들고 테스트를 마친다.
13.6. 테스트가 완료된 GUI모듈은 게임관리자에 관리하기 용의하도록 등록시킨다.
13.7. 등록된 GUI를 활용하여 필요한 요소마다 컴포넌트를 가져오거나 수치를 변경하여 원하는 레이아웃이 되도록 변경한다.
13.7.1. 예) 인벤토리
13.7.1.1. 인벤토리에 버튼을 추가하고, 스크립트를 추가해 들어오는 이름에 따라 버튼에 이미지나 텍스트가 변경되도록 모듈화한다.
13.7.1.2. 인벤토리스크릅트에서 버튼을 리스트에 넣어서 관리하고, 플레이어가 가지고있는 인벤토리의 리스트대로 버튼을 생성하고 초기화한다.
13.7.1.3. 초기화된 버튼의 셀의 크기에 맞추어 스크롤뷰의 컨턴츠 영역의 크기를 변경한다.
13.7.1.4. 인벤토리가 열릴때는 버튼을 추가하고, 닫힐때는 모든 버튼을 삭제하여 동기화시킨다.